#!/usr/bin/env python

import argparse
from argparse import RawTextHelpFormatter

parser = argparse.ArgumentParser(description="""
git-move moves to another branch by first stashing the
uncommited changes and then checking out the specified branch.

git-move internally keeps track of the uncommited changes on
each branch and their associated stashes, making switching branches
frequently a painless experience, in contrast to the usual git behavior.
""", formatter_class=RawTextHelpFormatter)

parser.add_argument("-i", "--init", action="store_true", help="""
Initialize git-move in the current git repository""")
parser.add_argument("--reset", action="store_true", help="""
Reset git-move cache (doesn't remove any created stashes)""")
parser.add_argument("-b", "--create-branch", action="store_true", help="""
If given branch does not exist, create it""")
parser.add_argument("destination", nargs="?", help="""
The destination branch to which git-move should move to""",)


args = parser.parse_args()

import os
import re
import subprocess
import fileinput
from pathlib import Path
from typing import Optional

GIT_MOVE_FILE=".git/gitmove"


def run_bash_cmd(bash_cmd: str) -> Optional[str]:
    try:
        result = subprocess.run(
            bash_cmd, stdout=subprocess.PIPE,
            stderr=subprocess.PIPE, check=True, text=True
        )
        output = result.stdout.strip()
        return output
    except subprocess.CalledProcessError:
        raise RuntimeError("Some went wrong.")

def stash_changes(current_branch: str) -> Optional[str]:
    output = run_bash_cmd(f"git stash push -u -m \"git-move changes on branch {current_branch}\"")
    if output is None:
        print("Stashing changes failed.")
        return None
    stash_hash = run_bash_cmd("git stash list --format=\"%h\"").splitlines()[0]
    return stash_hash

def get_move_hash(git_move_file_path: Path, branch: str) -> Optional[str]:
    with open(git_move_file_path, "r") as git_move_file:
        for line in git_move_file:
            parts = line.strip().split(': ')
            if parts[0] == branch:
                return parts[1]
    return None

def get_hash_ref(stash_hash: str) -> Optional[str]:
    stash_entries = run_bash_cmd(f"git stash list --format=\"%h: %gd\"").splitlines()
    for stash_entry in stash_entries:
        parts = stash_entry.strip().split(': ')
        if parts[0] == stash_hash:
            return parts[1]
    return None

def add_move_entry(git_move_file_path: Path, branch: str, stash_hash: str):
    with open(git_move_file_path, "a") as git_move_file:
        git_move_file.write(f"{branch}: {stash_hash}\n")

def delete_move_entry(git_move_file_path: Path, branch: str):
    for line in fileinput.input(git_move_file_path, inplace=True):
        parts = line.strip().split(': ')
        if parts[0] == branch:
            continue
        print(line, end="")


##
## Main function
##
def main():
    git_root_dir = run_bash_cmd("git rev-parse --show-toplevel")
    if git_root_dir is None:
        print("The current directory is not a git directory. Aborting...")
        exit(1)

    git_move_file_path = Path(git_root_dir) / GIT_MOVE_FILE

    if args.init:
        if not os.path.exists(git_move_file_path):
            try:
                git_move_file_path.touch()
                print("Successfully initialized git-move!")
            except:
                print("Initialization of git-move failed!")
                exit(1)
        else:
            print("git-move is already initialized.")
        exit(0)
    else:
        if not os.path.exists(git_move_file_path):
            print("git-move is not initialized yet.\n"
                "Initialize git-move by calling:\n\n"
                "git move --init\n"
            )
            exit(1)

    if args.reset:
        print("Resetting git-move cache...")
        with open(git_move_file_path, 'w') as git_move_file:
            git_move_file.truncate(0)
        print("Done!")
        exit(0)

    # Determine current and destination branch
    all_local_branches = run_bash_cmd("git branch --format='%(refname:short)'")
    destination_branch = args.destination
    current_branch = run_bash_cmd("git branch --show-current")

    if current_branch == destination_branch:
        print(f"Already on branch '{current_branch}'. Nothing to do.")
        exit(0)

    if destination_branch is None:
        print("No destination branch given. Exiting...")
        exit(1)
    elif destination_branch not in all_local_branches:
        if args.create_branch:
            print(f"Creating new branch {destination_branch}")
            run_bash_cmd(f"git branch {destination_branch}")
        else:
            print(f"Branch '{destination_branch}' is not available locally.")
            print(f"Run 'git move -b {destination_branch}' to create it before moving.")
            exit(1)

    if current_branch is None:
        print("Something went wrong. Exiting...")
        exit(1)

    uncommited_changes = run_bash_cmd("git status --porcelain")

    if re.sub(r'\s+', '', uncommited_changes) == "":  # Removes all whitespace
        # Checking for trivial case: no changes
        print(f"No uncommited changes. Moving to branch '{destination_branch}'.")
    else:
        print(f"Stashing changes on '{current_branch}'.")
        stash_hash = stash_changes(current_branch)
        if stash_hash is None:
            print("Something went wrong. Exiting...")
            exit(1)
        add_move_entry(git_move_file_path, current_branch, stash_hash)

    print(f"Moving to branch '{destination_branch}'.")
    run_bash_cmd(f"git checkout {destination_branch}")
    destination_hash = get_move_hash(git_move_file_path, destination_branch)
    if destination_hash is not None:
        print(f"Unstashing changes on branch '{destination_branch}'")
        destination_ref = get_hash_ref(destination_hash)
        if destination_ref is None:
            print("Something went wrong. Exiting...")
            exit(1)
        result = run_bash_cmd(f"git stash pop {destination_ref}")
        if result is None:
            print("Something went wrong. Exiting...")
            exit(1)
        delete_move_entry(git_move_file_path, destination_branch)


if __name__ == "__main__":
    main()
